#!/usr/bin/env python
# -*- coding: utf-8 -*-

__description__ = ''

# ---------------------------------------------------------------------------
# Standard imports:
import sys
import argparse
import subprocess
from StringIO import StringIO
import os
import multiprocessing.dummy as multiprocessing_api
import multiprocessing
import logging

# Third party imports
import yaml

# Local imports

# ---------------------------------------------------------------------------

BUNDLES_DIR = '/tmp/bundlesdir'
logger = multiprocessing.log_to_stderr()

class Bundle(object):

    def __init__(self, bundle_spec):
        self.uri = bundle_spec['uri']
        self.name = bundle_spec['name']
        self.pinned = bool(bundle_spec.get('pinned', 0))

    def __unicode__(self):
        return unicode(vars(self))

    def __str__(self):
        return unicode(self).encode('utf-8')

class Result(object):
    def __init__(self, bundle, command, action):
        self.bundle = bundle
        self.command = command
        self.action = action
        self.is_error = False
        self.output = ''
        self.rc = 0

    def __unicode__(self):
        return unicode(vars(self))

    def __str__(self):
        return unicode(self).encode('utf-8')


class Task(object):

    def __init__(self, bundles_dir):
        self._bundles_dir = bundles_dir

    def __call__(self, bundle):
        try:
            if bundle.pinned:
                logger.info("Not doing anything for %s. Pinned", bundle)
                return Result(bundle, 'noop', 'pinned')
            git_command, action = self.make_git_command(bundle.uri, bundle.name)
            res = Result(bundle, git_command, action)
            logger.info("Processing ({}) {}".format(action, bundle))

            try:
                output = subprocess.check_output(git_command, stderr=subprocess.STDOUT)
                res.output = output
                return res
            except subprocess.CalledProcessError as cpe:
                res.output = cpe.output
                res.rc = cpe.returncode
                res.is_error = True
                logger.error("Error code %d. Output: %s", cpe.returncode, cpe.output)
                return res
        except KeyboardInterrupt:
            pass

    def make_git_command(self, uri, name):
        bundle_dir = os.path.join(os.path.expanduser(self._bundles_dir), name)
        if os.path.isdir(os.path.join(bundle_dir, '.git')):
            return ['git', '-C', bundle_dir, 'pull'], 'update'
        return [
                'git',
                'clone',
                uri,
                os.path.join(os.path.expanduser(BUNDLES_DIR), name)
                ], 'install'



def process_queue(queue, args):
    pool = multiprocessing_api.Pool(args.jobs)

    action = Task(args.bundles_dir)

    p = pool.map_async(action, queue, 1)
    results = p.get(0xFFFF) # Give C-C a chance


def parse_args(argv):
    """ Parse and validate command line arguments """
    parser = argparse.ArgumentParser(description=__description__)
    parser.add_argument('--jobs', '-j', default=None, type=int)
    parser.add_argument('--bundles-dir', '-b', default=BUNDLES_DIR)
    parser.add_argument('--debug', '-d', default=False, action='store_true')
    args = parser.parse_args(argv[1:])

    return args


def get_bundles():
    logger.info('Getting list of plugins from Vim (assumes Vundle use)')
    subprocess.check_call(['vim', '-X', '+put! =g:bundles', '+w! /tmp/bundles', '+qa'])
    jsondata = None
    with open("/tmp/bundles", "r") as fin:
        jsondata = "[ {} ]".format(",".join(fin.readlines()))
    if jsondata is not None:
        bundles = yaml.load(StringIO(jsondata))
        bundles = [ Bundle(bundle_data) for bundle_data in bundles ]
        return bundles
    return None



def main(argv=[__name__]):
    """ Run this program """
    args = parse_args(argv)
    try:

        if args.debug:
            logger.setLevel(logging.DEBUG)

        bundles = get_bundles()
        if not bundles:
            logger.error("No plugins found from Vim. Do you use Vundle?")
        process_queue(bundles, args)

    except KeyboardInterrupt:
        sys.exit(-1)

if __name__ == '__main__':
    sys.exit(main(sys.argv) or 0)
